from enaml.layout.api import hbox
from enaml.core.include import Include
from enaml.widgets.api import (
    DockPane, Container, Label, Field, Form, PushButton, Separator, VGroup, HGroup, SpinBox, CheckBox
)


enamldef ObsConnection(Container):
    attr obs
    alias select

    padding = 2
    resist_width = 'ignore'
    resist_height = 'ignore'
    constraints = [
        hbox(select, lang_label, host_field, port_field, stream_server_url_field, stream_key_field, connect_button),
        select.width == 10,
        lang_label.width == 15,
        host_field.width == 80,
        port_field.width == 55,
        stream_server_url_field.width == 150,
        stream_key_field.width == 150,
        connect_button.width == 65,
        width >= 200
    ]
    background << "green" if obs.is_connected and obs.is_stream_started else ""

    func lock():
        select.enabled = False
        host_field.enabled = False
        port_field.enabled = False
        stream_server_url_field.enabled = False
        stream_key_field.enabled = False
        connect_button.enabled = False

    func unlock():
        select.enabled = True
        host_field.enabled = True
        port_field.enabled = True
        stream_server_url_field.enabled = True
        stream_key_field.enabled = True
        connect_button.enabled = True

    CheckBox: select:
        checked = False
    Label: lang_label:
        text << obs.lang_code
    Field: host_field:
        placeholder = "Host"
        text := obs.host
    Field: stream_server_url_field:
        placeholder = "Stream Server URL"
        text := obs.stream_settings['server']
    Field: stream_key_field:
        placeholder = "Stream Key"
        text := obs.stream_settings['key']
    SpinBox: port_field:
        minimum = 4441
        maximum = 4464
        value := obs.port
    PushButton: connect_button:
        text << "Connect" if not obs.is_connected else "Disc.."
        checkable = True
        checked << obs.is_connected
        clicked ::
            if not obs.is_connected:
                obs.connect()
            else:
                obs.disconnect()


enamldef ObsConnectionManager(DockPane):
    attr obs_manager
    title = "OBS Connections"
    closable = False

    Form:
        padding = 5
        VGroup:
            Include: inc:
                objects << [
                    ObsConnection(obs=obs)
                    for obs in obs_manager.obs_instances
                ]
            Separator:
                 pass
            HGroup:
                PushButton: add_btn:
                    text = "Add"
                    clicked ::
                        obs_manager.add_obs_instance()
                        obs_manager.status = "New connection added!"
                PushButton: remove_btn:
                    text = "Remove"
                    clicked ::
                        selected_obs = [obj.obs for obj in inc.objects if obj.select.checked]
                        for obs in selected_obs:
                            obs_manager.remove_obs_instance(obs)
                        obs_manager.status = "Last connection removed!"
                PushButton:
                    attr locked = False
                    text << "Lock" if not self.locked else "Unlock"
                    checkable = True
                    clicked ::
                        if self.locked:
                            for obj in inc.objects:
                                obj.unlock()
                            add_btn.enabled = True
                            remove_btn.enabled = True
                            self.locked = False
                        else:
                            for obj in inc.objects:
                                obj.lock()
                            add_btn.enabled = False
                            remove_btn.enabled = False
                            self.locked = True
