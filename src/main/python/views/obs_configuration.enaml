from enaml.layout.api import hbox, vbox
from enaml.core.api import Looper
from enaml.core.include import Include
from enaml.widgets.api import Window, PushButton, HGroup, VGroup, Label, Field, Container, Form, SpinBox, Separator, CheckBox


enamldef CreateObsProfile(Form):
    attr profile
    Label:
        text = "Lang code"
    Field:
        text := profile.lang_code
    Label:
        text = "Websocket Port"
    SpinBox:
        minimum = 4441
        maximum = 4464
        value := profile.websocket_port


enamldef ObsProfile(Container):
    attr profile
    alias select
    constraints = [
        vbox(
            hbox(select, launch_button, port_label, spacing=60),
            hbox(sep)
        ),
        select.width == 45,
    ]

    CheckBox: select:
        checked = False
    PushButton: launch_button:
        text = f"{profile.lang_code}"
        resist_width = 'weak'
        clicked ::
            obs_config.open_obs_instance(profile)
    Label: port_label:
        text = str(profile.websocket_port)
    Separator: sep:
         pass


enamldef Title(Container):
    constraints = [
        vbox(
            hbox(select_label, launch_label, port_label, spacing=60),
            hbox(sep)
        ),
        select_label.width == 45,

    ]
    Label: select_label:
        text = "Select"
    Label: launch_label:
        text = "Open OBS"
    Label: port_label:
        text = "WS port"
    Separator: sep:
         pass


enamldef ObsConfigurationManager(Window): window:
    attr obs_config
    attr profile
    initial_size = (300, 400)
    destroy_on_close = False
    title = "OBS Configuration"

    Container:
        Title:
            pass
        HGroup:
            padding = 0
            spacing = 0
            VGroup:
                padding = 0
                spacing = 0
                Include: inc:
                    objects << [
                        ObsProfile(profile=prof)
                        for prof in obs_config.profiles
                    ]
        CreateObsProfile:
            profile := window.profile
        PushButton:
            text = "Create New Profile"
            clicked ::
                obs_config.update_available_profiles()
                obs_config.create_profile_and_scene(profile)
                obs_config.update_available_profiles()
        PushButton:
            text = "Remove selected Profiles"
            clicked ::
                obs_config.update_available_profiles()
                selected_profiles = [obj.profile for obj in inc.objects if obj.select.checked]
                for profile in selected_profiles:
                    obs_config.remove_profile_and_scene(profile)
                obs_config.update_available_profiles()